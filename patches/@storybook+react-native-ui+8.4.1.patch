diff --git a/node_modules/@storybook/react-native-ui/src/BrandLogo.tsx b/node_modules/@storybook/react-native-ui/src/BrandLogo.tsx
new file mode 100644
index 0000000..be131b4
--- /dev/null
+++ b/node_modules/@storybook/react-native-ui/src/BrandLogo.tsx
@@ -0,0 +1,57 @@
+import { Theme } from "@storybook/react-native-theming";
+import React, { FC, useCallback, useMemo } from "react";
+import { Image, ImageSourcePropType, Linking, StyleProp, StyleSheet, Text, TextStyle, TouchableOpacity, View } from 'react-native';
+import { DarkLogo } from './icon/DarkLogo';
+import { Logo } from './icon/Logo';
+
+const DefaultBrandLogo: FC<{ theme: Theme }> = ({ theme }) => theme.base === 'light' ? (
+  <Logo height={25} width={125} />
+) : (
+  <DarkLogo height={25} width={125} />
+)
+const ThemedBrandLogo: FC<{ theme: Theme & { brand: NonNullable<Theme['brand']> } }> = ({ theme }) => {
+  const brandTitleStyle = useMemo<StyleProp<TextStyle>>(() => {
+    return [styles.brandTitle, { color: theme.color.primary, fontSize: theme.typography.size.m1 }]
+  }, [theme]);
+  const imageSource = useMemo<ImageSourcePropType | undefined>(() => {
+    if (theme.brand.imageSource) { return theme.brand.imageSource; }
+    else if (theme.brand.image) { return { uri: theme.brand.image }; }
+    else { return undefined; }
+  }, [theme]);
+  return <View style={styles.brandLogo}>
+    {imageSource && <Image source={imageSource} resizeMode="contain" style={styles.brandImage} />}
+    <Text style={brandTitleStyle} numberOfLines={1} ellipsizeMode="tail">{theme.brand.title}</Text>
+  </View>
+
+}
+export const BrandLogo: FC<{ theme: Theme }> = ({ theme }) => {
+  const openBrandUrl = useCallback(() => {
+    Linking.openURL(theme.brand!.url!);
+  }, [theme]);
+  if (!theme.brand) {
+    return <DefaultBrandLogo theme={theme} />
+  } else if (theme.brand?.url) {
+    return <TouchableOpacity style={styles.brandLogoContainer} onPress={openBrandUrl}><ThemedBrandLogo theme={theme} /></TouchableOpacity>
+  } else {
+    return <View style={styles.brandLogoContainer}><ThemedBrandLogo theme={theme} /></View>
+  }
+}
+const styles = StyleSheet.create({
+  brandLogoContainer: {
+    paddingHorizontal: 10,
+    flexDirection: "row",
+    justifyContent: 'flex-start',
+  },
+  brandLogo: {
+    flexDirection: "row",
+    alignItems: 'center',
+    gap: 15,
+  },
+  brandImage: {
+    width: 25,
+    height: 25,
+  },
+  brandTitle: {
+
+  }
+})
\ No newline at end of file
diff --git a/node_modules/@storybook/react-native-ui/src/Layout.tsx b/node_modules/@storybook/react-native-ui/src/Layout.tsx
index 0f277ed..4508272 100644
--- a/node_modules/@storybook/react-native-ui/src/Layout.tsx
+++ b/node_modules/@storybook/react-native-ui/src/Layout.tsx
@@ -13,8 +13,7 @@ import { MobileMenuDrawer, MobileMenuDrawerRef } from './MobileMenuDrawer';
 import { Sidebar } from './Sidebar';
 import { DEFAULT_REF_ID } from './constants';
 import { BottomBarToggleIcon } from './icon/BottomBarToggleIcon';
-import { DarkLogo } from './icon/DarkLogo';
-import { Logo } from './icon/Logo';
+import { BrandLogo } from './BrandLogo';
 import { MenuIcon } from './icon/MenuIcon';
 
 export const Layout = ({
@@ -72,12 +71,7 @@ export const Layout = ({
                   justifyContent: 'space-between',
                 }}
               >
-                {theme.base === 'light' ? (
-                  <Logo height={25} width={125} />
-                ) : (
-                  <DarkLogo height={25} width={125} />
-                )}
-
+                <BrandLogo theme={theme} />
                 <IconButton onPress={() => setDesktopSidebarOpen(false)} Icon={MenuIcon} />
               </View>
 
@@ -157,11 +151,7 @@ export const Layout = ({
 
       <MobileMenuDrawer ref={mobileMenuDrawerRef}>
         <View style={{ paddingLeft: 16, paddingTop: 4, paddingBottom: 4 }}>
-          {theme.base === 'light' ? (
-            <Logo height={25} width={125} />
-          ) : (
-            <DarkLogo height={25} width={125} />
-          )}
+          <BrandLogo theme={theme} />
         </View>
         <Sidebar
           extra={[]}
diff --git a/node_modules/@storybook/react-native-ui/src/Layout.tsx.orig b/node_modules/@storybook/react-native-ui/src/Layout.tsx.orig
new file mode 100644
index 0000000..0f277ed
--- /dev/null
+++ b/node_modules/@storybook/react-native-ui/src/Layout.tsx.orig
@@ -0,0 +1,215 @@
+import { SET_CURRENT_STORY } from '@storybook/core/core-events';
+import { addons } from '@storybook/core/manager-api';
+import { type API_IndexHash, type Args, type StoryContext } from '@storybook/core/types';
+import type { ReactRenderer } from '@storybook/react';
+import { styled, useTheme } from '@storybook/react-native-theming';
+import { ReactNode, useRef, useState } from 'react';
+import { ScrollView, Text, View } from 'react-native';
+import { useSafeAreaInsets } from 'react-native-safe-area-context';
+import { IconButton } from './IconButton';
+import { useLayout } from './LayoutProvider';
+import { AddonsTabs, MobileAddonsPanel, MobileAddonsPanelRef } from './MobileAddonsPanel';
+import { MobileMenuDrawer, MobileMenuDrawerRef } from './MobileMenuDrawer';
+import { Sidebar } from './Sidebar';
+import { DEFAULT_REF_ID } from './constants';
+import { BottomBarToggleIcon } from './icon/BottomBarToggleIcon';
+import { DarkLogo } from './icon/DarkLogo';
+import { Logo } from './icon/Logo';
+import { MenuIcon } from './icon/MenuIcon';
+
+export const Layout = ({
+  storyHash,
+  story,
+  children,
+}: {
+  storyHash: API_IndexHash | undefined;
+  story?: StoryContext<ReactRenderer, Args>;
+  children: ReactNode | ReactNode[];
+}) => {
+  const theme = useTheme();
+  const mobileMenuDrawerRef = useRef<MobileMenuDrawerRef>(null);
+  const addonPanelRef = useRef<MobileAddonsPanelRef>(null);
+  const insets = useSafeAreaInsets();
+  const { isDesktop } = useLayout();
+
+  const [desktopSidebarOpen, setDesktopSidebarOpen] = useState(true);
+
+  const [desktopAddonsPanelOpen, setDesktopAddonsPanelOpen] = useState(true);
+
+  if (isDesktop) {
+    return (
+      <View
+        style={{
+          flex: 1,
+          paddingTop: insets.top,
+          backgroundColor: theme.background.content,
+          flexDirection: 'row',
+        }}
+      >
+        <View
+          style={{
+            width: desktopSidebarOpen ? 240 : undefined,
+            padding: desktopSidebarOpen ? 0 : 10,
+            borderColor: theme.appBorderColor,
+            borderRightWidth: 1,
+          }}
+        >
+          {desktopSidebarOpen ? (
+            <ScrollView
+              keyboardShouldPersistTaps="handled"
+              contentContainerStyle={{
+                paddingBottom: insets.bottom,
+              }}
+            >
+              <View
+                style={{
+                  flexDirection: 'row',
+                  alignItems: 'center',
+                  paddingTop: 10,
+                  paddingLeft: 16,
+                  paddingBottom: 4,
+                  paddingRight: 10,
+                  justifyContent: 'space-between',
+                }}
+              >
+                {theme.base === 'light' ? (
+                  <Logo height={25} width={125} />
+                ) : (
+                  <DarkLogo height={25} width={125} />
+                )}
+
+                <IconButton onPress={() => setDesktopSidebarOpen(false)} Icon={MenuIcon} />
+              </View>
+
+              <Sidebar
+                extra={[]}
+                previewInitialized
+                indexError={undefined}
+                refs={{}}
+                setSelection={({ storyId: newStoryId }) => {
+                  const channel = addons.getChannel();
+
+                  channel.emit(SET_CURRENT_STORY, { storyId: newStoryId });
+                }}
+                status={{}}
+                index={storyHash}
+                storyId={story?.id}
+                refId={DEFAULT_REF_ID}
+              />
+            </ScrollView>
+          ) : (
+            <IconButton onPress={() => setDesktopSidebarOpen(true)} Icon={MenuIcon} />
+          )}
+        </View>
+
+        <View style={{ flex: 1 }}>
+          <View style={{ flex: 1, overflow: 'hidden' }}>{children}</View>
+
+          <View
+            style={{
+              height: desktopAddonsPanelOpen ? 300 : undefined,
+              borderTopWidth: 1,
+              borderColor: theme.appBorderColor,
+              paddingTop: desktopAddonsPanelOpen ? 4 : 0,
+              padding: desktopAddonsPanelOpen ? 0 : 10,
+            }}
+          >
+            {desktopAddonsPanelOpen ? (
+              <AddonsTabs storyId={story?.id} onClose={() => setDesktopAddonsPanelOpen(false)} />
+            ) : (
+              <IconButton
+                style={{ marginLeft: 'auto' }}
+                onPress={() => setDesktopAddonsPanelOpen(true)}
+                Icon={BottomBarToggleIcon}
+              />
+            )}
+          </View>
+        </View>
+      </View>
+    );
+  }
+
+  return (
+    <View style={{ flex: 1, paddingTop: insets.top, backgroundColor: theme.background.content }}>
+      <View style={{ flex: 1, overflow: 'hidden' }}>{children}</View>
+
+      <Container style={{ marginBottom: insets.bottom }}>
+        <Nav>
+          <Button
+            style={{ flexShrink: 1 }}
+            hitSlop={{ bottom: 10, left: 10, right: 10, top: 10 }}
+            onPress={() => {
+              mobileMenuDrawerRef.current.setMobileMenuOpen(true);
+            }}
+          >
+            <MenuIcon color={theme.color.mediumdark} />
+            <Text style={{ flexShrink: 1, color: theme.color.defaultText }} numberOfLines={1}>
+              {story?.title}/{story?.name}
+            </Text>
+          </Button>
+
+          <IconButton
+            onPress={() => addonPanelRef.current.setAddonsPanelOpen(true)}
+            Icon={BottomBarToggleIcon}
+          />
+        </Nav>
+      </Container>
+
+      <MobileMenuDrawer ref={mobileMenuDrawerRef}>
+        <View style={{ paddingLeft: 16, paddingTop: 4, paddingBottom: 4 }}>
+          {theme.base === 'light' ? (
+            <Logo height={25} width={125} />
+          ) : (
+            <DarkLogo height={25} width={125} />
+          )}
+        </View>
+        <Sidebar
+          extra={[]}
+          previewInitialized
+          indexError={undefined}
+          refs={{}}
+          setSelection={({ storyId: newStoryId }) => {
+            const channel = addons.getChannel();
+
+            channel.emit(SET_CURRENT_STORY, { storyId: newStoryId });
+          }}
+          status={{}}
+          index={storyHash}
+          storyId={story?.id}
+          refId={DEFAULT_REF_ID}
+        />
+      </MobileMenuDrawer>
+
+      <MobileAddonsPanel ref={addonPanelRef} storyId={story?.id} />
+    </View>
+  );
+};
+
+const Nav = styled.View({
+  display: 'flex',
+  flexDirection: 'row',
+  alignItems: 'center',
+  justifyContent: 'space-between',
+  width: '100%',
+  height: 40,
+  paddingHorizontal: 12,
+});
+
+const Container = styled.View(({ theme }) => ({
+  alignSelf: 'flex-end',
+  width: '100%',
+  backgroundColor: theme.barBg,
+  borderTopColor: theme.appBorderColor,
+  borderTopWidth: 1,
+}));
+
+const Button = styled.TouchableOpacity(({ theme }) => ({
+  display: 'flex',
+  flexDirection: 'row',
+  alignItems: 'center',
+  gap: 10,
+  color: theme.color.mediumdark,
+  fontSize: theme.typography.size?.s2 - 1,
+  paddingHorizontal: 7,
+  fontWeight: theme.typography.weight.bold,
+}));
